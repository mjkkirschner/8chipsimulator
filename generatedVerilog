
         (* DONT_TOUCH = "yes" *)
            module nRegister(data,clock,enable,Q);
        parameter n = 8;
        input [0:n-1] data;
        input clock,enable;
        output reg [0:n-1] Q = {n-1{1'b0}};

        always@(posedge clock)
            if(enable)
                Q<=data;
            endmodule
        
 (* DONT_TOUCH = "yes" *)
            module voltageRail(data,Q);
        input wire data;
        output reg Q;
        always@(data)
        Q <= data;
        endmodule
        
 (* DONT_TOUCH = "yes" *)
            module nBuffer(data,Q,outputEnable);
        parameter n=8;
        input [0:n-1] data;
        input outputEnable;
        output reg [0:n-1] Q;
    
        always@(outputEnable,data)
        if(outputEnable)
            Q <= data;
        else
            Q <= {n{1'b0}};
    endmodule
 (* DONT_TOUCH = "yes" *)
            module inverter(data,Q,outputEnable);
    input data,outputEnable;
    output reg Q;
    always@(data,outputEnable)
        if(outputEnable)
            Q <= ~data;
        else
            Q<=1'b0;
    endmodule
    
 (* DONT_TOUCH = "yes" *)
            module ANDGATE(a,b,c);
        input a,b;
        output c;
        and a1 (c,a,b);
        endmodule
module ORGATE(a,b,c);
    input a,b;
    output c;
    or a1 (c,a,b);
        endmodule
 (* DONT_TOUCH = "yes" *)
            module bus_mux ( selects, data_in, data_out ); 
        parameter bus_count = 16;                   // number of input buses 
        parameter mux_width = 8;                    // bit width of data buses 
        input  [0:bus_count-1]           selects;   // one-hot select signals 
        input  [0:mux_width*bus_count-1] data_in;   // concatenated input buses 
        output reg [0:mux_width-1]                 data_out;  // output data bus 
        
        integer i=0;
        integer j=0;
        always@(selects,data_in)
        begin
        data_out = 'b0; 
    
                for (i = 0; i < bus_count; i = i + 1) 
                        for (j = 0; j < mux_width; j = j + 1) 
                                data_out[j] = data_out[j] | data_in[mux_width*i +j] &selects[i]; 
        end  // always 
        endmodule
        
 (* DONT_TOUCH = "yes" *)
        module nbitAdder(sub,cin,x,y,sum,cout);
        parameter n = 8;
        input sub,cin;
        input [0:n-1] x,y;
        output [0:n-1]sum;
        output cout;
        wire[0:n-1] onesComplement;

        assign onesComplement = {n{sub}}^y +sub;
        assign {cout,sum} = {1'b0,x} + {1'b0,onesComplement} + cin;
        endmodule
        
 (* DONT_TOUCH = "yes" *)
    module nbitALU(mode,x,y,out,cout);
    parameter n = 8;
    input [0:3] mode;
    input [0:n-1] x,y;
    output [0:n-1]out;
    output cout;

    reg  [0:n] ALU_Result = 0 ;
    assign out = ALU_Result[0:n-1];
    assign cout = ALU_Result[n];

    always @(*)
    begin
        case(mode)
        4'b1001: // Addition
           ALU_Result = x + y ; 
        4'b0110: // Subtraction
           ALU_Result = x - y ;
        4'b1000: // Multiplication
           ALU_Result = x * y;
        4'b0100: // Division
           ALU_Result = x/y;
        4'b1100: // MOD
           ALU_Result = x%y;
          default: ALU_Result = x + y ; 
        endcase
    end
    endmodule
    
 (* DONT_TOUCH = "yes" *)
            module binaryCounter(D,clr_,load_,clock,enable1_,enable2_,Q);
        parameter n = 8;
        input [0:n-1] D;
        input clr_,clock,enable1_,enable2_,load_;
        output reg [0:n-1] Q = {n-1{1'b0}};

        always@(posedge clock)
        if(!clr_)
        Q <= 0;
        else if (!load_)
        Q <= D;
        else if ((!enable1_) && (!enable2_))
        Q <= Q + 1;
        endmodule
        
 (* DONT_TOUCH = "yes" *)
            module nbitComparator (
            input wire [0:n-1] a,
            input wire [0:n-1] b,
            output wire equal,
            output wire lower
          );
          parameter n = 8;
          assign equal = (a===b);
          assign lower = (a<b)?1'b1:1'b0;
          endmodule
          
 (* DONT_TOUCH = "yes" *)
            module twoLineToFourLineDecoder (a,b,en_,y0,y1,y2,y3);
          input a, b, en_;
          output y0,y1,y2,y3;
          assign y0= (~a) & (~b) & (~en_);
          assign y1= (~a) & b & (~en_);
          assign y2= a & (~ b) & (~en_);
          assign y3= a & b & (~en_);
          endmodule
          

        (* DONT_TOUCH = "yes" *)
        //-----------------------------------------------------
        module staticRamDiscretePorts (
            address     , // Address Input
            data        , // Data input
            cs_,
            we_,
            oe_,
            clock,
            Q               //output
            );
            parameter ROMFILE = "noFile";
            parameter DATA_WIDTH = 8 ;
            parameter ADDR_WIDTH = 8 ;
            parameter RAM_DEPTH = 1 << ADDR_WIDTH;
            
        
            //--------------Input Ports----------------------- 
            input [0:ADDR_WIDTH-1] address ;
            input [0:DATA_WIDTH-1]  data;
            input cs_;
            input we_;
            input oe_;
            input clock;
        
            //--------------Output Ports----------------------- 
            output reg [0:DATA_WIDTH-1] Q;
            integer i;
            //--------------Internal variables----------------
            reg [0:DATA_WIDTH-1] mem [0:RAM_DEPTH-1];
            
            //--------------Code Starts Here------------------ 
            initial begin
             $readmemb(ROMFILE, mem);
              for (i = 0; i < RAM_DEPTH; i = i + 1) begin
              #1 $display("%d",mem[i]);
              end
            end
            
            always @(posedge clock)
            begin
              if (!cs_ && !we_)
                mem[address] = data;
               Q = (!cs_ && !oe_) ? mem[address] : {DATA_WIDTH{1'bz}};
            end
            
            endmodule
    
(* DONT_TOUCH = "yes" *)
    //-----------------------------------------------------
    module dualPortStaticRam (
        address_1     , // Address Input
        address_2     , // Address Input
        data        , // Data input
        cs_,
        we_,
        oe_,
        clock,
        clock2,
        Q_1,               //output
        Q_2               //output
        );
        parameter ROMFILE = "noFile";
        parameter DATA_WIDTH = 8 ;
        parameter ADDR_WIDTH = 8 ;
        parameter RAM_DEPTH = 1 << ADDR_WIDTH;
        
    
        //--------------Input Ports----------------------- 
        input [0:ADDR_WIDTH-1] address_1 ;
        input [0:ADDR_WIDTH-1] address_2 ;
        input [0:DATA_WIDTH-1]  data;
        input cs_;
        input we_;
        input oe_;
        input clock;
        input clock2;
    
        //--------------Output Ports----------------------- 
        output reg [0:DATA_WIDTH-1] Q_1;
        output reg [0:DATA_WIDTH-1] Q_2;
        integer i;
        //--------------Internal variables----------------
        reg [0:DATA_WIDTH-1] mem [0:RAM_DEPTH-1];
        
        //--------------Code Starts Here------------------ 
        initial begin
         $readmemb(ROMFILE, mem);
          for (i = 0; i < RAM_DEPTH; i = i + 1) begin
          #1 $display("%d",mem[i]);
          end
        end
        
        always @(posedge clock)
        begin
          if (!cs_ && !we_)
            mem[address_1] = data;
           Q_1 = (!cs_ && !oe_) ? mem[address_1] : {DATA_WIDTH{1'bz}};
           //Q_2 = mem[address_2];
        end

        always@(posedge clock2) begin
            Q_2 = mem[address_2];
        end
        
        endmodule
    
    
(* DONT_TOUCH = "yes" *)
    module vgaSignalGenerator(
        input wire i_clk,           // base clock
        input wire i_pix_stb,       // pixel clock strobe
        output wire o_hs,           // horizontal sync
        output wire o_vs,           // vertical sync
        output wire o_blanking,     // high during blanking interval
        output wire o_active,       // high during active pixel drawing
        output wire o_screenend,    // high for one tick at the end of screen
        output wire o_animate,      // high for one tick at end of active drawing
        output wire [9:0] o_x,      // current pixel x position
        output wire [8:0] o_y       // current pixel y position
        );
    
        // VGA timings https://timetoexplore.net/blog/video-timings-vga-720p-1080p
        localparam HS_STA = 16;              // horizontal sync start
        localparam HS_END = 16 + 96;         // horizontal sync end
        localparam HA_STA = 16 + 96 + 48;    // horizontal active pixel start
        localparam VS_STA = 480 + 11;        // vertical sync start
        localparam VS_END = 480 + 11 + 2;    // vertical sync end
        localparam VA_END = 480;             // vertical active pixel end
        localparam LINE   = 800;             // complete line (pixels)
        localparam SCREEN = 524;             // complete screen (lines)
    
        reg [9:0] h_count = 0;  // line position
        reg [9:0] v_count = 0;  // screen position
    
        // generate sync signals (active low for 640x480)
        assign o_hs = ~((h_count >= HS_STA) & (h_count < HS_END));
        assign o_vs = ~((v_count >= VS_STA) & (v_count < VS_END));
    
        // keep x and y bound within the active pixels
        assign o_x = (h_count < HA_STA) ? 0 : (h_count - HA_STA);
        assign o_y = (v_count >= VA_END) ? (VA_END - 1) : (v_count);
    
        // blanking: high within the blanking period
        assign o_blanking = ((h_count < HA_STA) | (v_count > VA_END - 1));
    
        // active: high during active pixel drawing
        assign o_active = ~((h_count < HA_STA) | (v_count > VA_END - 1)); 
    
        // screenend: high for one tick at the end of the screen
        assign o_screenend = ((v_count == SCREEN - 1) & (h_count == LINE));
    
        // animate: high for one tick at the end of the final active pixel line
        assign o_animate = ((v_count == VA_END - 1) & (h_count == LINE));
    
        always @ (posedge i_clk)
        begin
            if (i_pix_stb)  // once per pixel
            begin
                if (h_count == LINE)  // end of line
                begin
                    h_count <= 0;
                    v_count <= v_count + 1;
                end
                else 
                    h_count <= h_count + 1; 
    
                if (v_count == SCREEN)  // end of screen
                    begin
                    v_count <= 0;
                    end
            end
        end
    endmodule

    
 
            module SPIComPart(
                input wire i_clk,                   // base clock
                input wire [0:n-1] i_controlReg,    // control reg
                input wire  i_serial,               // serialIn
        
                output reg [0:n-1] o_dataReg = 0,       //databits to write to
                output reg [0:n-1] o_statReg = 0,       //status reg to write to
        
                output reg o_enable = 1,                 // start comms on slave
                output reg o_clock = 0           // clock out for clock
                );
        
                parameter n=16;
                
                reg [32:0]clockScaler = 0;
                //output counter
                reg [0:7]internalcounter = 0;
                reg hold = 0;
                reg slow_clock = 0;
                reg  r1_pulse = 0;
                
                //we may want to use two more registers
                //to sync this signal correctly

                //reg r2_pulse = 0;
                //reg r3_pulse = 0; 

                //when the clock goes high and start is high
                //then generate n clock pulses.
                //then drive start low.
                //and shift in data after each pulse.
                
                always @(posedge i_clk)
                begin
                clockScaler <= clockScaler + 1;
                slow_clock <= clockScaler[11];
                end
                
                always@(posedge slow_clock) begin
                
                r1_pulse <= i_controlReg[15];
               
               //start clocking out
                if((i_controlReg[15] && !r1_pulse))begin
                   hold = 1;
                   o_statReg[15] = 0;
                end
               
               //count up to 31 and reset all regs after that.
                        if(internalcounter > 31)
                        begin
                            internalcounter = 0;
                            hold = 0;
                            o_enable = 1;
                            o_statReg[15] = 1;
                            o_clock = 0;
                        end
                        
                          
                          
                        //if we have not yet reset the start flag
                        //then count on the clock - input clock / preScaler / 2 
                        if(hold == 1)begin //begin clock out 16 pulses
                            internalcounter = internalcounter + 1;
                             o_enable = 0;
                             o_clock = internalcounter[7];
                            //shift in LSB data from the serial port into the MSB
                            if(o_clock == 0) begin
                            o_dataReg <= {i_serial,o_dataReg[0:n-2]};
                            end //end shift in
                        end //end clock out
                       
                end // end always
                endmodule
    
        (* DONT_TOUCH = "yes" *)
        module top(   
                input CLK,
                input SERIALIN,
                
                output wire ENABLEOUT,
                output wire CLOCKOUT,
                output reg RGB3_Red,
                output reg [0:3] LED,
                output wire VGA_HS_O,       // horizontal sync output
                output wire VGA_VS_O,       // vertical sync output
                output wire [3:0] VGA_R,    // 4-bit VGA red output
                output wire [3:0] VGA_G,    // 4-bit VGA green output
                output wire [3:0] VGA_B,     // 4-bit VGA blue output);
                output reg  [0:7] OUT_AREG, //debugging
                output wire PIX_STRB);
                   
                reg HIGH = 1;
                reg LOW = 0;
                reg SUBMODE = 0;
                reg UNCONNECTED = 0;
    
                reg [0:0]clock;
                reg [0:0]ClockFaster;
                reg pix_stb;

        
        
        wire [0:1-1] COMenableOn690ef363_dd18_4caa_8574_d0953cf180bc;
wire [0:1-1] invertON0865275e_a826_4e95_9e11_8a53478a1b33;
wire [0:1-1] signalBankOutputOna1dbd540_91a7_4587_8f89_8768cc2cf273;
wire [0:1-1] invertOn077703e1_1e9d_4835_957e_a3ec66008e67;
wire [0:1-1] eepromChipEnable6b27fb6d_4017_461e_8d36_4801d35d6fb1;
wire [0:1-1] eepromOutEnable95fae6b2_5b09_4387_be01_649bd87db980;
wire [0:1-1] eepromWriteDisabled121a1930_7827_4560_b598_ee24e78e6455;
wire [0:1-1] load_disabled5a78cc4c_9f26_4ea8_afe3_96488271b286;
wire [0:1-1] count_enable_microcode_counter97b4cd14_f7b4_4a04_98f5_a86921caf56b;
wire [0:1-1] invert_clock_signal_enablebcbcb9e9_34d8_40a0_8287_1525a987c686;
wire [0:1-1] clearPC10ef8c67_bced_42c7_bc3d_fdddfb878ece;
wire [0:1-1] ram_chipEnablee8ac0f97_cb6a_473d_a0f7_ee32f215d913;



wire [0:16-1] comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9;
wire [0:16-1] allInputsFor46480dd2_6ec0_4444_9937_ef9dfd6da9da_comDataReg= {spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[0],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[1],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[2],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[3],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[4],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[5],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[6],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[7],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[8],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[9],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[10],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[11],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[12],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[13],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[14],spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0[15]};
wire [0:16-1] comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10;
wire [0:16-1] allInputsFora24e9d68_2240_4dea_a340_83d0d03f5824_comStatusReg= {spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[0],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[1],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[2],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[3],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[4],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[5],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[6],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[7],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[8],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[9],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[10],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[11],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[12],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[13],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[14],spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[15]};

wire [0:1-1] invert_clock_signal3d08890f_3bd7_4d9d_ab2e_c47c43844a35;
wire [0:3-1] microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a;
wire [0:1-1] decodeInverter099789e2_16b8_4682_a519_ec3658a9e32c;

wire decoder2158e0c64_6ffa_4504_bd6a_a01ad6df331c;
wire decoder273e726de_3429_4bdd_aff9_2da1303255f4;
wire decoder219b893c9_457a_4d99_8608_a7c7430a22ac;
wire decoder243c37d4f_b015_4f2a_8b97_90a31945810d;
wire decoder1694ef97d_d7a5_42bd_86d0_125f1b92ffe9;
wire decoder1eb6342f0_b664_4c89_a2eb_a03e05e70e50;
wire decoder1ca5b80f8_357c_475b_96e1_309b64d2f222;
wire decoder180a2e398_1dee_4c3b_a25b_f1ccfbc2a47b;
wire [0:16-1] Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a;
wire [0:16-1] pc_buffer17fb175c_f67c_40cb_bd1a_8063f729bb86;
wire [0:16-1] allInputsForbbb1c759_620f_4664_96c2_fa95adf87d7b_pc_buffer= {Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[0],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[1],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[2],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[3],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[4],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[5],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[6],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[7],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[8],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[9],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[10],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[11],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[12],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[13],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[14],Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a[15]};
wire [0:16-1] main_busbfd01c55_dd26_487b_aa4a_212dd73a544c;
wire [0:112-1] allInputsFore698456b_64f8_40e3_a008_3b109a2d89ae_main_bus= {A_reg_buffera64ed150_aeb8_4b02_896a_167a259db0aa,B_reg_buffer66f1e35d_6c53_426e_aaf4_ea5bfc999cb5,adder_buffer7c62919e_c16b_48b8_b142_aa7086fe19d3,ram_output_bufferfd1acdad_f296_40a5_8fd8_297744361567,pc_buffer17fb175c_f67c_40cb_bd1a_8063f729bb86,comDataRegBufferf7c50107_697b_4b69_9f85_3b1bcfaff20c,comStatusRegBuffer8910a8ab_ae9b_42cf_8b8c_ce1858812cf8};
wire [0:7-1] allSelectsFore698456b_64f8_40e3_a008_3b109a2d89ae_main_bus= {microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[8],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[15],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[9],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[1],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[4],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[25],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[23]};
wire [0:16-1] instruction_registera82f6cdd_2e4a_4d0a_9b2e_3b34be361711;
wire [0:16-1] allInputsForb1a8a832_063b_4318_be44_52dae1e028ba_instruction_register= {main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[0],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[1],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[2],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[3],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[4],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[5],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[6],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[7],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[8],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[9],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[10],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[11],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[12],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[13],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[14],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[15]};
wire [0:32-1] microcode_rom358796a9_3073_4135_b545_710edec83357;
wire [0:8-1] allAddressInputsFor86e6e839_c87d_4fcd_a6fc_b390f934fd26_microcode_rom= {instruction_registera82f6cdd_2e4a_4d0a_9b2e_3b34be361711[11],instruction_registera82f6cdd_2e4a_4d0a_9b2e_3b34be361711[12],instruction_registera82f6cdd_2e4a_4d0a_9b2e_3b34be361711[13],instruction_registera82f6cdd_2e4a_4d0a_9b2e_3b34be361711[14],instruction_registera82f6cdd_2e4a_4d0a_9b2e_3b34be361711[15],microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[0],microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[1],microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[2]};
wire [0:32-1] allDataInputsFor86e6e839_c87d_4fcd_a6fc_b390f934fd26_microcode_rom= {UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED};
wire [0:32-1] microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e;
wire [0:32-1] allInputsFor08966c0b_d366_4642_8bf8_1f1fec21c45a_microCode_SIGNAL_bank= {microcode_rom358796a9_3073_4135_b545_710edec83357[0],microcode_rom358796a9_3073_4135_b545_710edec83357[1],microcode_rom358796a9_3073_4135_b545_710edec83357[2],microcode_rom358796a9_3073_4135_b545_710edec83357[3],microcode_rom358796a9_3073_4135_b545_710edec83357[4],microcode_rom358796a9_3073_4135_b545_710edec83357[5],microcode_rom358796a9_3073_4135_b545_710edec83357[6],microcode_rom358796a9_3073_4135_b545_710edec83357[7],microcode_rom358796a9_3073_4135_b545_710edec83357[8],microcode_rom358796a9_3073_4135_b545_710edec83357[9],microcode_rom358796a9_3073_4135_b545_710edec83357[10],microcode_rom358796a9_3073_4135_b545_710edec83357[11],microcode_rom358796a9_3073_4135_b545_710edec83357[12],microcode_rom358796a9_3073_4135_b545_710edec83357[13],microcode_rom358796a9_3073_4135_b545_710edec83357[14],microcode_rom358796a9_3073_4135_b545_710edec83357[15],microcode_rom358796a9_3073_4135_b545_710edec83357[16],microcode_rom358796a9_3073_4135_b545_710edec83357[17],microcode_rom358796a9_3073_4135_b545_710edec83357[18],microcode_rom358796a9_3073_4135_b545_710edec83357[19],microcode_rom358796a9_3073_4135_b545_710edec83357[20],microcode_rom358796a9_3073_4135_b545_710edec83357[21],microcode_rom358796a9_3073_4135_b545_710edec83357[22],microcode_rom358796a9_3073_4135_b545_710edec83357[23],microcode_rom358796a9_3073_4135_b545_710edec83357[24],microcode_rom358796a9_3073_4135_b545_710edec83357[25],microcode_rom358796a9_3073_4135_b545_710edec83357[26],microcode_rom358796a9_3073_4135_b545_710edec83357[27],microcode_rom358796a9_3073_4135_b545_710edec83357[28],microcode_rom358796a9_3073_4135_b545_710edec83357[29],microcode_rom358796a9_3073_4135_b545_710edec83357[30],microcode_rom358796a9_3073_4135_b545_710edec83357[31]};
wire [0:16-1] comDataRegBufferf7c50107_697b_4b69_9f85_3b1bcfaff20c;
wire [0:16-1] allInputsFor3ac16810_fef5_4f89_adfe_60e0c8c90b5c_comDataRegBuffer= {comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[0],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[1],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[2],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[3],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[4],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[5],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[6],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[7],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[8],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[9],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[10],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[11],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[12],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[13],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[14],comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[15]};
wire [0:16-1] comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329;
wire [0:16-1] allInputsFor4c5fd36b_3a3a_47a5_ade3_0a840a857e4b_comControlReg= {main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[0],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[1],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[2],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[3],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[4],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[5],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[6],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[7],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[8],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[9],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[10],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[11],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[12],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[13],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[14],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[15]};
wire [0:16-1] spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0;
wire [0:16-1] spi_testaa2f88c1_d16d_4466_a322_9f73feab2342;
wire [0:16-1] AllControlInputsFor19810888_f1a5_41d5_a4a9_3b879bf49e21_spi_test= {comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[0],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[1],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[2],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[3],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[4],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[5],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[6],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[7],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[8],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[9],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[10],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[11],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[12],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[13],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[14],comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329[15]};
wire [0:16-1] comStatusRegBuffer8910a8ab_ae9b_42cf_8b8c_ce1858812cf8;
wire [0:16-1] allInputsFor2d193222_1639_4596_a18f_c612ccb246f2_comStatusRegBuffer= {comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[0],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[1],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[2],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[3],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[4],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[5],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[6],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[7],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[8],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[9],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[10],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[11],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[12],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[13],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[14],comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10[15]};
wire [0:1-1] countEnableInverter25d88922_8d89_44e7_80be_8933256371fc;
wire [0:1-1] ramOutInverter789a578f_c1bd_4b2f_9ab5_f34ddb90c26e;
wire [0:1-1] ramInInverter7c3bc241_0b9a_4967_be5d_ce1ee76639d5;
wire [0:16-1] memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99;
wire [0:16-1] allInputsFor52fa0004_3d62_4821_8dc3_06ad478f87a6_memory_address_register= {main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[0],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[1],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[2],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[3],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[4],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[5],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[6],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[7],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[8],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[9],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[10],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[11],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[12],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[13],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[14],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[15]};
wire [0:16-1] main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87;
wire [0:16-1] main_ram1a0bdff0_4e0b_4f17_88f6_2fdcce4e5a15;
wire [0:16-1] allAddress1InputsFor425ad0cd_8fd6_4181_96b4_d28286e09b84_main_ram= {memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[0],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[1],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[2],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[3],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[4],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[5],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[6],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[7],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[8],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[9],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[10],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[11],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[12],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[13],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[14],memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99[15]};
wire [0:16-1] allAddress2InputsFor425ad0cd_8fd6_4181_96b4_d28286e09b84_main_ram= {UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED,UNCONNECTED};
wire [0:16-1] allDataInputsFor425ad0cd_8fd6_4181_96b4_d28286e09b84_main_ram= {main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[0],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[1],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[2],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[3],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[4],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[5],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[6],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[7],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[8],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[9],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[10],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[11],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[12],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[13],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[14],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[15]};
wire [0:16-1] ram_output_bufferfd1acdad_f296_40a5_8fd8_297744361567;
wire [0:16-1] allInputsFor19080b93_bc66_434a_8c2d_4a24868b81f3_ram_output_buffer= {main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[0],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[1],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[2],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[3],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[4],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[5],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[6],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[7],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[8],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[9],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[10],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[11],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[12],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[13],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[14],main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87[15]};
wire [0:16-1] OUT_register28a9054c_6bf3_433e_922d_f7121eeb385b;
wire [0:16-1] allInputsFore739cd4c_630b_455f_9271_372ba0a6f69e_OUT_register= {main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[0],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[1],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[2],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[3],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[4],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[5],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[6],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[7],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[8],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[9],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[10],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[11],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[12],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[13],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[14],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[15]};
wire [0:16-1] B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22;
wire [0:16-1] allInputsFor19a252f9_dd91_4c8c_82bf_bc9bbeb61a1f_B_register= {main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[0],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[1],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[2],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[3],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[4],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[5],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[6],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[7],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[8],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[9],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[10],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[11],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[12],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[13],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[14],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[15]};
wire [0:16-1] B_reg_buffer66f1e35d_6c53_426e_aaf4_ea5bfc999cb5;
wire [0:16-1] allInputsForf4d26c3c_cdfd_436e_9d20_d4999a640b8c_B_reg_buffer= {B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[0],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[1],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[2],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[3],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[4],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[5],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[6],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[7],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[8],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[9],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[10],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[11],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[12],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[13],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[14],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[15]};
wire [0:16-1] A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf;
wire [0:16-1] allInputsFor8538b40b_9cab_41d0_89a6_21e440f4ef53_A_register= {main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[0],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[1],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[2],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[3],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[4],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[5],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[6],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[7],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[8],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[9],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[10],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[11],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[12],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[13],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[14],main_busbfd01c55_dd26_487b_aa4a_212dd73a544c[15]};
wire [0:0] A_B_Comparatorab84b18f_5fb9_4c57_aa7f_7190ee6ca673;
wire [0:16-1] allADataInputsFor881c5fa8_851c_489b_8439_cafaca614c5f_A_B_Comparator= {A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[0],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[1],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[2],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[3],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[4],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[5],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[6],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[7],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[8],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[9],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[10],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[11],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[12],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[13],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[14],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[15]};
wire [0:16-1] allBDataInputsFor881c5fa8_851c_489b_8439_cafaca614c5f_A_B_Comparator= {B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[0],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[1],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[2],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[3],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[4],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[5],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[6],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[7],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[8],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[9],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[10],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[11],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[12],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[13],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[14],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[15]};
wire [0:0] A_B_Comparator34909a78_ff39_490e_ac4d_c1c07ddfe6e3;
wire [0:1-1] invertALESSB893269f2_e78e_4a08_b12b_b67519ee08e8;
wire [0:1-1] invertAEQUALBb9e88199_b532_4e16_9d91_1ec4fb7bc050;
wire [0:1-1] AGREATERB13f9f89b_4abb_47c4_b2fd_6db86e144d6e;
wire [0:4-1] flags_registere84df14f_c0c7_4b0b_9175_ae0b66f6b1e8;
wire [0:4-1] allInputsFor4b61a54a_196e_4e22_81c5_0571c3236881_flags_register= {AGREATERB13f9f89b_4abb_47c4_b2fd_6db86e144d6e[0],A_B_Comparatorab84b18f_5fb9_4c57_aa7f_7190ee6ca673[0],A_B_Comparator34909a78_ff39_490e_ac4d_c1c07ddfe6e3[0],UNCONNECTED};
wire [0:1-1] ANDALESSB319ab577_f4e3_467e_828b_4964df4b0cd9;
wire [0:1-1] ANDAEQUALBa59ef441_8442_40ab_b03f_02f63bf23baa;
wire [0:1-1] ANDAGB6bd0b47f_abae_4ff8_b7f7_5cc938b6e8b6;
wire [0:1-1] OR187babaa5_b640_4207_afda_814f1e763ce3;
wire [0:1-1] OR281379d64_c7b7_40e2_b23d_9a21b7c36806;
wire [0:1-1] loadInverter456d7a3b_5565_4a10_99b8_7e0ee562af42;
wire [0:16-1] A_reg_buffera64ed150_aeb8_4b02_896a_167a259db0aa;
wire [0:16-1] allInputsFor34f3c734_ce6c_4d7d_94e2_63c8ea7e155c_A_reg_buffer= {A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[0],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[1],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[2],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[3],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[4],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[5],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[6],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[7],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[8],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[9],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[10],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[11],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[12],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[13],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[14],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[15]};
wire [0:16-1] adder8df1bd99_905c_49e7_97a1_03c80170cebc;
wire adder34f25ef8_efe0_4ac7_87b1_5946b5511cb6;
wire [0:3] allDataForModeeaf2acfa_eba2_4c41_a565_e5969de15414_adder= {microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[10],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[11],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[12],microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[13]};
wire [0:16-1] allADataInputsForeaf2acfa_eba2_4c41_a565_e5969de15414_adder= {A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[0],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[1],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[2],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[3],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[4],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[5],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[6],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[7],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[8],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[9],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[10],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[11],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[12],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[13],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[14],A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf[15]};
wire [0:16-1] allBDataInputsForeaf2acfa_eba2_4c41_a565_e5969de15414_adder= {B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[0],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[1],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[2],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[3],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[4],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[5],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[6],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[7],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[8],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[9],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[10],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[11],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[12],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[13],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[14],B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22[15]};
wire [0:16-1] adder_buffer7c62919e_c16b_48b8_b142_aa7086fe19d3;
wire [0:16-1] allInputsFore9706fc5_170b_4847_8d39_dd8913268e05_adder_buffer= {adder8df1bd99_905c_49e7_97a1_03c80170cebc[0],adder8df1bd99_905c_49e7_97a1_03c80170cebc[1],adder8df1bd99_905c_49e7_97a1_03c80170cebc[2],adder8df1bd99_905c_49e7_97a1_03c80170cebc[3],adder8df1bd99_905c_49e7_97a1_03c80170cebc[4],adder8df1bd99_905c_49e7_97a1_03c80170cebc[5],adder8df1bd99_905c_49e7_97a1_03c80170cebc[6],adder8df1bd99_905c_49e7_97a1_03c80170cebc[7],adder8df1bd99_905c_49e7_97a1_03c80170cebc[8],adder8df1bd99_905c_49e7_97a1_03c80170cebc[9],adder8df1bd99_905c_49e7_97a1_03c80170cebc[10],adder8df1bd99_905c_49e7_97a1_03c80170cebc[11],adder8df1bd99_905c_49e7_97a1_03c80170cebc[12],adder8df1bd99_905c_49e7_97a1_03c80170cebc[13],adder8df1bd99_905c_49e7_97a1_03c80170cebc[14],adder8df1bd99_905c_49e7_97a1_03c80170cebc[15]};
wire [0:10-1] sigGen3aee2d67_c7c6_42a7_ac82_a5d33209b4d1;
wire [0:9-1] sigGend0a2b6fd_a38f_4ce5_bbd4_d43b5720458a;
wire sigGenb4ef44da_2262_482b_8fca_bc2026d2541b;
wire sigGen71ea6aca_acf1_42f0_905b_7dca4226fcb4;


voltageRail COMenableOnf41aa992_822c_4b3f_b25d_e6834884da08 ( 
                .data(HIGH), 
                .Q(COMenableOn690ef363_dd18_4caa_8574_d0953cf180bc) );


voltageRail invertONe6cd3d60_95ef_4160_a9ef_f53fd5a9c9b2 ( 
                .data(HIGH), 
                .Q(invertON0865275e_a826_4e95_9e11_8a53478a1b33) );


voltageRail signalBankOutputOn438113db_bc15_43b3_9cb3_f2bb4ed7e161 ( 
                .data(HIGH), 
                .Q(signalBankOutputOna1dbd540_91a7_4587_8f89_8768cc2cf273) );


voltageRail invertOn26b4d4d1_254f_4c3a_b39a_6a34be0446e9 ( 
                .data(HIGH), 
                .Q(invertOn077703e1_1e9d_4835_957e_a3ec66008e67) );


voltageRail eepromChipEnabled76fc983_22df_4312_96d9_19560c38afef ( 
                .data(LOW), 
                .Q(eepromChipEnable6b27fb6d_4017_461e_8d36_4801d35d6fb1) );


voltageRail eepromOutEnablea9efca2f_d130_4c35_a16b_78858e9891b4 ( 
                .data(LOW), 
                .Q(eepromOutEnable95fae6b2_5b09_4387_be01_649bd87db980) );


voltageRail eepromWriteDisabled6fd845b2_aa99_41bd_bfc1_4cc00f2095d4 ( 
                .data(HIGH), 
                .Q(eepromWriteDisabled121a1930_7827_4560_b598_ee24e78e6455) );


voltageRail load_disabled4e329189_fdc6_43f4_afc7_48ffac1c598c ( 
                .data(HIGH), 
                .Q(load_disabled5a78cc4c_9f26_4ea8_afe3_96488271b286) );


voltageRail count_enable_microcode_counter615fde59_96f9_483b_9ff0_2ba5a9ee854c ( 
                .data(LOW), 
                .Q(count_enable_microcode_counter97b4cd14_f7b4_4a04_98f5_a86921caf56b) );


voltageRail invert_clock_signal_enableefefdeaa_2c0e_4f57_9eda_b46a54c079d3 ( 
                .data(HIGH), 
                .Q(invert_clock_signal_enablebcbcb9e9_34d8_40a0_8287_1525a987c686) );


voltageRail clearPC24fa80d5_dd24_4026_a0a6_3878ff1cb0dc ( 
                .data(HIGH), 
                .Q(clearPC10ef8c67_bced_42c7_bc3d_fdddfb878ece) );


voltageRail ram_chipEnablef5018560_9dfb_4d14_90de_80163dea841b ( 
                .data(LOW), 
                .Q(ram_chipEnablee8ac0f97_cb6a_473d_a0f7_ee32f215d913) );









nRegister #(.n(16)) comDataReg46480dd2_6ec0_4444_9937_ef9dfd6da9da ( 
                .data(allInputsFor46480dd2_6ec0_4444_9937_ef9dfd6da9da_comDataReg), 
                .clock(clock[0]), 
                .enable(COMenableOn690ef363_dd18_4caa_8574_d0953cf180bc[0]),
                 .Q(comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9) );



nRegister #(.n(16)) comStatusRega24e9d68_2240_4dea_a340_83d0d03f5824 ( 
                .data(allInputsFora24e9d68_2240_4dea_a340_83d0d03f5824_comStatusReg), 
                .clock(clock[0]), 
                .enable(COMenableOn690ef363_dd18_4caa_8574_d0953cf180bc[0]),
                 .Q(comStatusReg0545c13b_2a8a_4b91_982b_1957fbdcaf10) );




inverter invert_clock_signal03a1e437_efe2_4da4_a1cd_923d35ea9848 ( 
                .data(clock[0]), 
                .Q(invert_clock_signal3d08890f_3bd7_4d9d_ab2e_c47c43844a35), 
                .outputEnable(invert_clock_signal_enablebcbcb9e9_34d8_40a0_8287_1525a987c686[0]) );


binaryCounter #(.n(3)) microcode_step_counterd532af3a_7ba6_4036_820d_c1965182b1a4 (
                .D(UNCONNECTED),
                .clr_(invert_clock_signal_enablebcbcb9e9_34d8_40a0_8287_1525a987c686[0]),
                .load_(load_disabled5a78cc4c_9f26_4ea8_afe3_96488271b286[0]),
                .clock(invert_clock_signal3d08890f_3bd7_4d9d_ab2e_c47c43844a35[0]),
                .enable1_(count_enable_microcode_counter97b4cd14_f7b4_4a04_98f5_a86921caf56b[0]),
                .enable2_(count_enable_microcode_counter97b4cd14_f7b4_4a04_98f5_a86921caf56b[0]),
                .Q(microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a));


inverter decodeInverter4644cf4d_6356_46cd_8594_f9616589f7bf ( 
                .data(microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[2]), 
                .Q(decodeInverter099789e2_16b8_4682_a519_ec3658a9e32c), 
                .outputEnable(invert_clock_signal_enablebcbcb9e9_34d8_40a0_8287_1525a987c686[0]) );







twoLineToFourLineDecoder decoder2630b20a6_839d_45fb_81f5_ab6868514c99 (
                 microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[0],
                  microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[1],
                   microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[2],
                    decoder2158e0c64_6ffa_4504_bd6a_a01ad6df331c,
                    decoder273e726de_3429_4bdd_aff9_2da1303255f4,
                    decoder219b893c9_457a_4d99_8608_a7c7430a22ac,
                    decoder243c37d4f_b015_4f2a_8b97_90a31945810d);





twoLineToFourLineDecoder decoder182443178_757f_443b_b81f_47a147bea0eb (
                 microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[0],
                  microcode_step_counter58dedda5_0390_44a3_9312_65b342632f2a[1],
                   decodeInverter099789e2_16b8_4682_a519_ec3658a9e32c[0],
                    decoder1694ef97d_d7a5_42bd_86d0_125f1b92ffe9,
                    decoder1eb6342f0_b664_4c89_a2eb_a03e05e70e50,
                    decoder1ca5b80f8_357c_475b_96e1_309b64d2f222,
                    decoder180a2e398_1dee_4c3b_a25b_f1ccfbc2a47b);


binaryCounter #(.n(16)) Program_Counterc75413d4_5dae_4986_a609_47b38bf13d00 (
                .D(main_busbfd01c55_dd26_487b_aa4a_212dd73a544c),
                .clr_(clearPC10ef8c67_bced_42c7_bc3d_fdddfb878ece[0]),
                .load_(loadInverter456d7a3b_5565_4a10_99b8_7e0ee562af42[0]),
                .clock(clock[0]),
                .enable1_(countEnableInverter25d88922_8d89_44e7_80be_8933256371fc[0]),
                .enable2_(countEnableInverter25d88922_8d89_44e7_80be_8933256371fc[0]),
                .Q(Program_Counter6f6539aa_1b35_4562_b9b1_cf231a7e6b3a));



nBuffer  #(.n(16)) pc_bufferbbb1c759_620f_4664_96c2_fa95adf87d7b (
                  .data(allInputsForbbb1c759_620f_4664_96c2_fa95adf87d7b_pc_buffer),
                  .Q(pc_buffer17fb175c_f67c_40cb_bd1a_8063f729bb86), 
                  .outputEnable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[4]) );




bus_mux #(.bus_count(7),.mux_width(16)) main_buse698456b_64f8_40e3_a008_3b109a2d89ae (
                .selects(allSelectsFore698456b_64f8_40e3_a008_3b109a2d89ae_main_bus),
                .data_in(allInputsFore698456b_64f8_40e3_a008_3b109a2d89ae_main_bus),
                .data_out(main_busbfd01c55_dd26_487b_aa4a_212dd73a544c));



nRegister #(.n(16)) instruction_registerb1a8a832_063b_4318_be44_52dae1e028ba ( 
                .data(allInputsForb1a8a832_063b_4318_be44_52dae1e028ba_instruction_register), 
                .clock(clock[0]), 
                .enable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[2]),
                 .Q(instruction_registera82f6cdd_2e4a_4d0a_9b2e_3b34be361711) );




staticRamDiscretePorts #(.ROMFILE(ROMFILE),.DATA_WIDTH(32),.ADDR_WIDTH(8)) microcode_rom86e6e839_c87d_4fcd_a6fc_b390f934fd26 (
                 .address(allAddressInputsFor86e6e839_c87d_4fcd_a6fc_b390f934fd26_microcode_rom),
                  .data(allDataInputsFor86e6e839_c87d_4fcd_a6fc_b390f934fd26_microcode_rom), 
                  .cs_(eepromChipEnable6b27fb6d_4017_461e_8d36_4801d35d6fb1[0]),
                   .we_(eepromWriteDisabled121a1930_7827_4560_b598_ee24e78e6455[0]),
                   .oe_(eepromOutEnable95fae6b2_5b09_4387_be01_649bd87db980[0]),
                    .clock(ClockFaster[0]),
                   .Q(microcode_rom358796a9_3073_4135_b545_710edec83357));



nBuffer  #(.n(32)) microCode_SIGNAL_bank08966c0b_d366_4642_8bf8_1f1fec21c45a (
                  .data(allInputsFor08966c0b_d366_4642_8bf8_1f1fec21c45a_microCode_SIGNAL_bank),
                  .Q(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e), 
                  .outputEnable(signalBankOutputOna1dbd540_91a7_4587_8f89_8768cc2cf273[0]) );



nBuffer  #(.n(16)) comDataRegBuffer3ac16810_fef5_4f89_adfe_60e0c8c90b5c (
                  .data(allInputsFor3ac16810_fef5_4f89_adfe_60e0c8c90b5c_comDataRegBuffer),
                  .Q(comDataRegBufferf7c50107_697b_4b69_9f85_3b1bcfaff20c), 
                  .outputEnable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[25]) );



nRegister #(.n(16)) comControlReg4c5fd36b_3a3a_47a5_ade3_0a840a857e4b ( 
                .data(allInputsFor4c5fd36b_3a3a_47a5_ade3_0a840a857e4b_comControlReg), 
                .clock(clock[0]), 
                .enable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[24]),
                 .Q(comControlReg04bdee2b_d27b_4e5e_b84c_127034b46329) );




SPIComPart #(.n(16)) spi_test19810888_f1a5_41d5_a4a9_3b879bf49e21 (
                .i_controlReg(AllControlInputsFor19810888_f1a5_41d5_a4a9_3b879bf49e21_spi_test),
                .o_dataReg(spi_testfe12c6e4_e192_4a0a_a7f4_3c84279734b0),
                .o_statReg(spi_testaa2f88c1_d16d_4466_a322_9f73feab2342),
                .i_serial(SERIALIN),
                .o_enable(ENABLEOUT),
                .o_clock(CLOCKOUT),
               .i_clk(clock[0]));



nBuffer  #(.n(16)) comStatusRegBuffer2d193222_1639_4596_a18f_c612ccb246f2 (
                  .data(allInputsFor2d193222_1639_4596_a18f_c612ccb246f2_comStatusRegBuffer),
                  .Q(comStatusRegBuffer8910a8ab_ae9b_42cf_8b8c_ce1858812cf8), 
                  .outputEnable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[23]) );


inverter countEnableInverterdba5bf9e_cd37_4d41_ae92_14b4b2ec8270 ( 
                .data(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[6]), 
                .Q(countEnableInverter25d88922_8d89_44e7_80be_8933256371fc), 
                .outputEnable(invertOn077703e1_1e9d_4835_957e_a3ec66008e67[0]) );


inverter ramOutInverter5ce8d90a_8e73_455b_869e_31f37ef11c97 ( 
                .data(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[1]), 
                .Q(ramOutInverter789a578f_c1bd_4b2f_9ab5_f34ddb90c26e), 
                .outputEnable(invertOn077703e1_1e9d_4835_957e_a3ec66008e67[0]) );


inverter ramInInverterfca87016_8777_4398_b203_40372a08fba9 ( 
                .data(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[0]), 
                .Q(ramInInverter7c3bc241_0b9a_4967_be5d_ce1ee76639d5), 
                .outputEnable(invertOn077703e1_1e9d_4835_957e_a3ec66008e67[0]) );



nRegister #(.n(16)) memory_address_register52fa0004_3d62_4821_8dc3_06ad478f87a6 ( 
                .data(allInputsFor52fa0004_3d62_4821_8dc3_06ad478f87a6_memory_address_register), 
                .clock(clock[0]), 
                .enable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[18]),
                 .Q(memory_address_registerd6cb6f92_52d9_4fc9_850b_7e8ad1411b99) );






dualPortStaticRam #(.ROMFILE(RAMFILE),.DATA_WIDTH(16),.ADDR_WIDTH(16)) main_ram425ad0cd_8fd6_4181_96b4_d28286e09b84 (
                .address_1(allAddress1InputsFor425ad0cd_8fd6_4181_96b4_d28286e09b84_main_ram),
                .address_2(allAddress2InputsFor425ad0cd_8fd6_4181_96b4_d28286e09b84_main_ram),
                 .data(allDataInputsFor425ad0cd_8fd6_4181_96b4_d28286e09b84_main_ram), 
                 .cs_(ram_chipEnablee8ac0f97_cb6a_473d_a0f7_ee32f215d913[0]),
                  .we_(ramInInverter7c3bc241_0b9a_4967_be5d_ce1ee76639d5[0]),
                  .oe_(ramOutInverter789a578f_c1bd_4b2f_9ab5_f34ddb90c26e[0]),
                  .clock(ClockFaster[0]),
                  .clock2(ClockFaster[0]),
                  .Q_1(main_ram72c1ee2a_99b2_49b7_90ec_e1ba1ae73a87),
                  .Q_2(main_ram1a0bdff0_4e0b_4f17_88f6_2fdcce4e5a15));



nBuffer  #(.n(16)) ram_output_buffer19080b93_bc66_434a_8c2d_4a24868b81f3 (
                  .data(allInputsFor19080b93_bc66_434a_8c2d_4a24868b81f3_ram_output_buffer),
                  .Q(ram_output_bufferfd1acdad_f296_40a5_8fd8_297744361567), 
                  .outputEnable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[1]) );



nRegister #(.n(16)) OUT_registere739cd4c_630b_455f_9271_372ba0a6f69e ( 
                .data(allInputsFore739cd4c_630b_455f_9271_372ba0a6f69e_OUT_register), 
                .clock(clock[0]), 
                .enable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[16]),
                 .Q(OUT_register28a9054c_6bf3_433e_922d_f7121eeb385b) );



nRegister #(.n(16)) B_register19a252f9_dd91_4c8c_82bf_bc9bbeb61a1f ( 
                .data(allInputsFor19a252f9_dd91_4c8c_82bf_bc9bbeb61a1f_B_register), 
                .clock(clock[0]), 
                .enable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[14]),
                 .Q(B_registerf7e06d29_3767_4e32_9494_2c5a59c3ea22) );



nBuffer  #(.n(16)) B_reg_bufferf4d26c3c_cdfd_436e_9d20_d4999a640b8c (
                  .data(allInputsForf4d26c3c_cdfd_436e_9d20_d4999a640b8c_B_reg_buffer),
                  .Q(B_reg_buffer66f1e35d_6c53_426e_aaf4_ea5bfc999cb5), 
                  .outputEnable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[15]) );



nRegister #(.n(16)) A_register8538b40b_9cab_41d0_89a6_21e440f4ef53 ( 
                .data(allInputsFor8538b40b_9cab_41d0_89a6_21e440f4ef53_A_register), 
                .clock(clock[0]), 
                .enable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[7]),
                 .Q(A_register76fb5ba8_13c2_47c6_89f9_3776db6bbecf) );





nbitComparator #(.n(16)) A_B_Comparator881c5fa8_851c_489b_8439_cafaca614c5f (
                .a(allADataInputsFor881c5fa8_851c_489b_8439_cafaca614c5f_A_B_Comparator),
                .b(allBDataInputsFor881c5fa8_851c_489b_8439_cafaca614c5f_A_B_Comparator),
                .equal(A_B_Comparatorab84b18f_5fb9_4c57_aa7f_7190ee6ca673),
                .lower(A_B_Comparator34909a78_ff39_490e_ac4d_c1c07ddfe6e3));


inverter invertALESSB3202bb45_1bf9_490e_b6da_79c6ea9e7ba4 ( 
                .data(A_B_Comparator34909a78_ff39_490e_ac4d_c1c07ddfe6e3[0]), 
                .Q(invertALESSB893269f2_e78e_4a08_b12b_b67519ee08e8), 
                .outputEnable(invertON0865275e_a826_4e95_9e11_8a53478a1b33[0]) );


inverter invertAEQUALB7f7a08fa_5092_4e1f_b41f_9a4d84ff5965 ( 
                .data(A_B_Comparatorab84b18f_5fb9_4c57_aa7f_7190ee6ca673[0]), 
                .Q(invertAEQUALBb9e88199_b532_4e16_9d91_1ec4fb7bc050), 
                .outputEnable(invertON0865275e_a826_4e95_9e11_8a53478a1b33[0]) );


ANDGATE AGREATERBe5476b3f_69ce_4bde_a3d2_d8ad6fa82f8f ( 
                invertAEQUALBb9e88199_b532_4e16_9d91_1ec4fb7bc050[0], 
                invertALESSB893269f2_e78e_4a08_b12b_b67519ee08e8[0], 
                AGREATERB13f9f89b_4abb_47c4_b2fd_6db86e144d6e );



nRegister #(.n(4)) flags_register4b61a54a_196e_4e22_81c5_0571c3236881 ( 
                .data(allInputsFor4b61a54a_196e_4e22_81c5_0571c3236881_flags_register), 
                .clock(clock[0]), 
                .enable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[22]),
                 .Q(flags_registere84df14f_c0c7_4b0b_9175_ae0b66f6b1e8) );


ANDGATE ANDALESSB3b074653_3a6f_429c_abe1_8ddd82bffb9a ( 
                flags_registere84df14f_c0c7_4b0b_9175_ae0b66f6b1e8[2], 
                microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[19], 
                ANDALESSB319ab577_f4e3_467e_828b_4964df4b0cd9 );


ANDGATE ANDAEQUALBdbf1b33d_dd18_47e2_9166_1c9e2bd1bcfe ( 
                flags_registere84df14f_c0c7_4b0b_9175_ae0b66f6b1e8[1], 
                microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[20], 
                ANDAEQUALBa59ef441_8442_40ab_b03f_02f63bf23baa );


ANDGATE ANDAGB0e0065e2_1013_4eda_9b16_5e9509e41f53 ( 
                flags_registere84df14f_c0c7_4b0b_9175_ae0b66f6b1e8[0], 
                microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[21], 
                ANDAGB6bd0b47f_abae_4ff8_b7f7_5cc938b6e8b6 );


ORGATE OR15d95a5cc_245c_45a7_8bbe_c4f1c72114c4 ( 
                ANDAGB6bd0b47f_abae_4ff8_b7f7_5cc938b6e8b6[0], 
                ANDAEQUALBa59ef441_8442_40ab_b03f_02f63bf23baa[0],
                OR187babaa5_b640_4207_afda_814f1e763ce3);


ORGATE OR2dc9330a8_288d_486a_aa8e_043924c1603f ( 
                OR187babaa5_b640_4207_afda_814f1e763ce3[0], 
                ANDALESSB319ab577_f4e3_467e_828b_4964df4b0cd9[0],
                OR281379d64_c7b7_40e2_b23d_9a21b7c36806);


inverter loadInverterde19daeb_4301_401c_ba24_c97ebc6ae8d4 ( 
                .data(OR281379d64_c7b7_40e2_b23d_9a21b7c36806[0]), 
                .Q(loadInverter456d7a3b_5565_4a10_99b8_7e0ee562af42), 
                .outputEnable(invertON0865275e_a826_4e95_9e11_8a53478a1b33[0]) );



nBuffer  #(.n(16)) A_reg_buffer34f3c734_ce6c_4d7d_94e2_63c8ea7e155c (
                  .data(allInputsFor34f3c734_ce6c_4d7d_94e2_63c8ea7e155c_A_reg_buffer),
                  .Q(A_reg_buffera64ed150_aeb8_4b02_896a_167a259db0aa), 
                  .outputEnable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[8]) );






nbitALU #(.n(16)) addereaf2acfa_eba2_4c41_a565_e5969de15414 (
                .mode(allDataForModeeaf2acfa_eba2_4c41_a565_e5969de15414_adder),
                .x(allADataInputsForeaf2acfa_eba2_4c41_a565_e5969de15414_adder),
                .y(allBDataInputsForeaf2acfa_eba2_4c41_a565_e5969de15414_adder),
                .out(adder8df1bd99_905c_49e7_97a1_03c80170cebc),
                .cout(adder34f25ef8_efe0_4ac7_87b1_5946b5511cb6));



nBuffer  #(.n(16)) adder_buffere9706fc5_170b_4847_8d39_dd8913268e05 (
                  .data(allInputsFore9706fc5_170b_4847_8d39_dd8913268e05_adder_buffer),
                  .Q(adder_buffer7c62919e_c16b_48b8_b142_aa7086fe19d3), 
                  .outputEnable(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[9]) );





vgaSignalGenerator sigGen48e237fc_74df_45b7_aa7e_927869605a90 (
                .i_clk(clock[0]),
                .i_pix_stb(25MHZCLOCK),
                .o_hs(sigGenb4ef44da_2262_482b_8fca_bc2026d2541b),
                .o_vs(sigGen71ea6aca_acf1_42f0_905b_7dca4226fcb4),
                .o_x(sigGen3aee2d67_c7c6_42a7_ac82_a5d33209b4d1),
                .o_y(sigGend0a2b6fd_a38f_4ce5_bbd4_d43b5720458a)
            );

        reg [32:0] counter = 32'b0;
            always @ (posedge CLK) 
            begin
            
                LED = OUT_register28a9054c_6bf3_433e_922d_f7121eeb385b;
                RGB3_Red   = spi_testaa2f88c1_d16d_4466_a322_9f73feab2342[15];
                OUT_AREG = comDataReg94a2e4b3_7668_4abe_ba5a_6d1f1d560df9[8:15];

                counter <= counter + 1;
                {pix_stb, cnt} <= cnt + 16'h4000;  // divide by 4: (2^16)/4 = 0x4000
                if(microCode_SIGNAL_bankc10657fa_538a_4b73_bc43_216413297e0e[17] == 0) begin
                clock[0] <= counter[8];
                end
               
                ClockFaster[0] <= counter[0];
               
            end

        endmodule
        